trigger:
  batch: true
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'

jobs:
  - job: Build
    displayName: 'Build'

    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: self
      clean: true
      submodules: true
      persistCredentials: true

    - task: CmdLine@2
      displayName: 'Install Markdownlint CLI'
      inputs:
        script: 'npm install markdownlint-cli'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: CmdLine@2
      displayName: 'Run Markdownlint'
      inputs:
        script: 'npx markdownlint **/*.md --ignore node_modules --ignore src'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: CmdLine@2
      displayName: 'Update Submodules'
      inputs:
        script: 'git submodule update --recursive --remote'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Server Submodule'
      inputs:
        command: build
        arguments: '--configuration Release'
        workingDirectory: '$(Build.SourcesDirectory)/src/jellyfin'

    - task: CmdLine@2
      displayName: 'DocFX Build'
      inputs:
        targetType: 'filePath'
        filePath: '.ci/build-in-ci.sh'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: ArchiveFiles@2
      condition: contains(variables['Build.SourceBranch'], 'master')
      displayName: 'Package Documentation'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/_site'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/jellyfin-docs-$(Build.BuildId).zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Docs'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'jellyfin-docs-$(Build.BuildId)'
        publishLocation: 'Container'
